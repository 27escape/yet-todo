#!/usr/bin/env node
// this is overly verbose to help things along
// -----------------------------------------------------------------------------
/*
  name:    yet-todo
  purpose: test filesniffer
  author:  kevinmu
  email:   kevinmu
  licence: MIT
  version: 1.0.0
*/
// -----------------------------------------------------------------------------

// make sure we are checking for basic coding errors
"use strict";
"use esversion: 6";
const DAY = 86400;

// -----------------------------------------------------------------------------
// get the library modules brought in
// npm install -g commander shelljs chalk

// use this process command commandline arguments
const program = require("commander"),
  path = require("path"),
  // comment in/out whichever of these you want to use
  // may not want colored output
  // chalk = require("chalk"),
  console = require("consolemd"),
  // probably want to use shortcuts
  shell = require("shelljs"),
  { FileSniffer, asObject } = require("filesniffer"),
  FileHound = require("filehound");

const PROGRAM = "yet-todo";
const VERSION = "1.0.0";
const CONFIG_DIR = path.join(process.env.HOME, `.${PROGRAM}`);

// -----------------------------------------------------------------------------

function Verbose(init_value) {
  var _is_verbose = init_value || 0;
  this.set = function(value) {
    _is_verbose = value || 0;
  };
  this.msg = function(text) {
    if (_is_verbose) {
      console.error(`#yellow(${text})`);
    }
  };
}

// -----------------------------------------------------------------------------
// handle highlghting of @high, @critical, @due, and then anything left starting with @
function _replace_atword(match, word, datestr) {
  let resp = "";
  switch (word) {
    case "high":
      resp = `!#yellow(@${word})`;
      break;
    case "critical":
      resp = `!#red(@${word})`;
      break;
    case "due":
      datestr = datestr.replace(/[\(\)]/g, "");
      // need to ceck the date to decide on the color
      // iso dates are considered to something is -dim text-
      let color = "#green";
      const date = Date.parse(datestr);
      const now = new Date();
      const datediff = (date - now) / 1000;
      if (datediff < 0) {
        color = "!#red";
      } else if (datediff < DAY) {
        color = "#red";
      } else if (datediff < 2 * DAY) {
        color = "#yellow";
      }

      datestr = datestr.replace(/(\d{4})-(\d{2})-(\d{2})/, "$1/$2/$3");
      // also put brackets back
      resp = `${color}(@${word}(${datestr}))`;
      break;
    default:
      resp = `*#cyan(@${word})*`;
  }

  return resp;
}

//-----------------------------------------------------------------------------
// now we can 'grep for any @today @due etc things and decide how to report them'
// @critical, @low, @high, @today
// @due(YYYY-MM-DD)
// @due(+3)  // in 3 days
function hilite_matches(matches) {
  const spaces = "";
  Object.entries(matches).forEach(([filename, lines]) => {
    console.log(`${path.basename(filename)}:`);
    for (let line of lines) {
      line = line.replace(/@(\w+)(\(.*?\))?/g, _replace_atword);
      console.log(spaces + `${line}`);
    }
    console.log("");
  });
}

//-----------------------------------------------------------------------------
// we have a main function as an async function, so that we can await for activities in it!

async function main() {
  // get the passed arguments, help provided by default

  program
    .description(
      "yet-todo: find files that have '[ ]' style todo items in them"
    )
    .version("1.0.0", "--version")
    // .usage("shorter purpose description")
    .usage("[options] directory_to_search")
    // note that this does not remove things from process.argv
    .parse(process.argv);

  // assuming we want some extra arguments to be passed
  if (!program.args || !program.args.length) {
    program.help();
  }

  // do something with the verbose flag
  const verbose = new Verbose(program.verbose);

  const someDirectory = program.args[0];
  if (!shell.test("-d", someDirectory)) {
    console.error(`target directory (${someDirectory}) does not exist`);
    program.help();
  }

  // need a try/catch around the following sections, in case someDirectory was rubbish
  // only find files that match ones that may have [ ] type todo items in them
  const files = await FileHound.create()
    .path(someDirectory)
    .ext([".txt", ".md", ".mdown", ".markdown", ".td", ".todo", ".tasks"])
    .ignoreHiddenDirectories()
    .ignoreHiddenFiles()
    .find();

  // then with the list of files, find the lines we want
  const matches = await FileSniffer.create()
    .paths(files)
    .collect(asObject())
    .find("[ ]");

  hilite_matches(matches);
}

// -----------------------------------------------------------------------------
// now we start the main activity
main()
  .then(() => {})
  .catch(err => {
    console.log("there was an error");
    console.log(err);
  });
