#!/usr/bin/env node
// this is overly verbose to help things along
// -----------------------------------------------------------------------------
/*
  name:    yet-todo
  purpose: find files that have '[ ]' style todo items in them
  author:  kevinmu
  email:   kevinmu
  licence: MIT
  version: 1.0.0
*/
// -----------------------------------------------------------------------------

// make sure we are checking for basic coding errors
'use strict';
'use esversion: 6';

const DAY = 86400;

// -----------------------------------------------------------------------------

const path = require('path');
const PROGRAM = path.basename(process.argv[1]).replace(/\.js$/, '');
const VERSION = '1.1.0';

const program = require('commander');
const console = require('consolemd');

const shell = require('shelljs');
const { FileSniffer, asObject } = require('filesniffer');
const FileHound = require('filehound');

const debug = require('debug')(PROGRAM);
const verbose = require('debug');

const editFile = require('../lib/edit-file');

// const CONFIG_DIR = path.join(process.env.HOME, `.${PROGRAM}`);

// -----------------------------------------------------------------------------
// handle highlghting of @high, @critical, @due, and then anything left starting with @
function _replaceAtword (match, word, datestr) {
  let resp = '';
  let color = '#green';
  let date;
  let now;
  let datediff;

  switch (word) {
    case 'high':
      resp = `#yellow(@${word})`;
      break;
    case 'critical':
      resp = `#red(@${word})`;
      break;
    case 'due':
      datestr = datestr.replace(/[()]/g, '');
      // need to ceck the date to decide on the color
      // iso dates are considered to something is -dim text-
      date = Date.parse(datestr);
      now = new Date();
      datediff = (date - now) / 1000;
      if (datediff < 0) {
        color = '!#red';
      } else if (datediff < DAY) {
        color = '#red';
      } else if (datediff < 2 * DAY) {
        color = '#yellow';
      }

      datestr = datestr.replace(/(\d{4})-(\d{2})-(\d{2})/, '$1/$2/$3');
      // also put brackets back
      resp = `${color}(@${word}(${datestr}))`;
      break;
    default:
      resp = `*#cyan(@${word})*`;
  }

  return resp;
}

// -----------------------------------------------------------------------------
// now we can 'grep for any @today @due etc things and decide how to report them'
// @critical, @low, @high, @today
// @due(YYYY-MM-DD)
// @due(+3)  // in 3 days
//
// print out the matching lines
//
// @method     hiliteMatches
// @param      {Object}  matches  The matches
// @param      {Boolean}  edit     The edit
// @param      {Object}  show     Contains before, after the number of lines before/after a match to print out
//
function hiliteMatches (matches, edit, show) {
  const spaces = '';
  Object.entries(matches).forEach(([filename, lines]) => {
    // console.log(`${path.basename(filename)}:`);
    console.log(`${filename}:`);
    if (edit) {
      debug(`Opening ${filename}`);
      editFile(filename);
    }
    for (let line of lines) {
      line = line.replace(/@(\w+)(\(.*?\))?/g, _replaceAtword);
      console.log(spaces + `${line}`);
    }
    console.log('');
  });
}

/**
 * validate that the value used for line count is a number
 *
 * @method     _validateLineCount
 * @param      {String}  count   The count
 */
function _validateLineCount (count) {
  let newCount = parseInt(count);

  if (!count.match(/^\d+$/)) {
    console.warn(`Passed value ${count} is not a valid`);
    newCount = 0;
  }
  return newCount;
}

// -----------------------------------------------------------------------------
// we have a main function as an async function, so that we can await for activities in it!

async function main () {
  // get the passed arguments, help provided by default

  program
    .description(
      `${PROGRAM}: find files that have '[ ]' style todo items in them`
    )
    .version(VERSION, '--version')
    .option('-v, --verbose', 'enable verbose debug')
    .option('-e, --edit', 'Edit files with TODO items in them')
    .option('-A, --after <value>', 'Number of lines to show after a match', _validateLineCount)
    .option('-B, --before <value>', 'Number of lines to show before a match', _validateLineCount)
    .option('-C, --count <value>', 'Number of lines to show before and after a match', _validateLineCount)
    .usage('[options] directory_to_search')
    .parse(process.argv);

  // assuming we want some extra arguments to be passed
  if (!program.args || !program.args.length) {
    program.help();
  }

  if (program.verbose) {
    verbose.enable('*');
  }

  const someDirectory = program.args[0];
  if (!shell.test('-d', someDirectory)) {
    console.error(`target directory (${someDirectory}) does not exist`);
    program.help();
  }

  // make sure things are the same if required
  if (program.count) {
    program.before = program.count;
    program.after = program.count;
  }

  // need a try/catch around the following sections, in case someDirectory was rubbish
  // only find files that match ones that may have [ ] type todo items in them
  const files = await FileHound.create()
    .path(someDirectory)
    .ext(['.txt', '.md', '.mdown', '.markdown', '.td', '.todo', '.tasks'])
    .ignoreHiddenDirectories()
    .ignoreHiddenFiles()
    .find();

  // then with the list of files, find the lines we want
  const matches = await FileSniffer.create()
    .paths(files)
    .collect(asObject())
    .find('[ ]');

  hiliteMatches(matches, program.edit, { before: program.before, after: program.after });
}

// -----------------------------------------------------------------------------
// now we start the main activity
main()
  .then(() => {})
  .catch(err => {
    console.log('there was an error');
    console.log(err);
  });
